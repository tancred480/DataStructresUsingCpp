int SatisfiedRange(string word, vector<vector<int>> &ranges,int q)
{
    int cnt = 0;
    for (int i = 0; i <q; i++)
    {
        int s = ranges[i][0] - 1, e = ranges[i][1] - 1;
        unordered_set<char> st;
        int f = 1;
        for (int j = s; j <= e; j++)
        {
            if (word[j] != '.' && st.find(word[j]) == st.end())
            {
                st.insert(word[j]);
            }
            else if (word[j] != '.')
            {
                f = 0;
                break;
            }
        }
        if (f == 1)
        {
            cnt++;
        }
    }
    return cnt;
}
vector<vector<int>> merge(vector<vector<int>>& intervals) {
	if(intervals.size()==1) return intervals;
	sort(intervals.begin(),intervals.end());
	int start = intervals[0][0],end = intervals[0][1];
	vector<vector<int>> ans;
	for(int i=1;i<intervals.size();i++){
		if(intervals[i][0]<=end){
			end = max(intervals[i][1],end);
		}else{
			vector<int> temp = {start,end};
			ans.push_back(temp);
			start = intervals[i][0];
			end  = intervals[i][1];
		}
	}
	ans.push_back({start,end});
	return ans;
}
int main()
{
    int t;
    cin >> t;
    while (t--)
    {
        int n, q;
        cin >> n >> q;
        string s;
        cin >> s;
        vector<int> arr(n);
        for (auto &el : arr)
            cin >> el;
        vector<vector<int>> range(q, vector<int>(2));
        for (auto &el : range)
            cin >> el[0] >> el[1];
		vector<vector<int>> ranges = merge(range);
		q = ranges.size();
        int i;
        for (i = 1; i <= n; i++)
        {
            int e = arr[i - 1] - 1;
            s[e] = '.';
            int cnt = SatisfiedRange(s, ranges,q);
            if (q == cnt)
            {
				if(i==1){i=0;}
                break;
            }
        }
        cout << i << endl;
    }
    return 0;
}


#include<bits/stdc++.h>
using namespace std;

void DFS(int node,vector<vector<int>>& g1,vector<vector<int>>& g2,vector<bool>& vis,int count,unordered_set<int>& st,int& res){
    if(vis[node]) return;
    vis[node] =true;
    if(g2[node].size()>0 || st.find(node)!=st.end()) return;
    else st.insert(node);
    if(count>res) res = count;
    for(auto &child:g1[node]){
        if(!vis[child]){
            DFS(child,g1,g2,vis,count+1,st,res);
        }
    }
}
int solve (int N, int A, int B, vector<vector<int> > land, vector<vector<int> > water) {
   // Write your code here
   vector<vector<int>> gl(N+1),gw(N+1);
   vector<bool> vis(N+1,false);
   for(auto &el:land){
       int x = el[0],y=el[1];
       gl[x].push_back(y);
       gl[y].push_back(x);
   }
   for(auto &el:water){
       int x = el[0],y=el[1];
       gl[x].push_back(y);
       gl[y].push_back(x);
   }
   int res = 0;
   unordered_set<int> st;
   for(int i=1;i<=N;i++){
       if(!vis[i]) DFS(i,gl,gw,vis,0,st,res);
   }
   fill(vis.begin(),vis.end(),false);
   for(int i=1;i<=N;i++){
       if(!vis[i]) DFS(i,gw,gl,vis,0,st,res);
   }
    return res-1;
}

int main() {

    ios::sync_with_stdio(0);
    cin.tie(0);
    int T;
    cin >> T;
    for(int t_i = 0; t_i < T; t_i++)
    {
        int N;
        cin >> N;
        int A;
        cin >> A;
        int B;
        cin >> B;
        vector<vector<int> > land(A, vector<int>(2));
        for (int i_land = 0; i_land < A; i_land++)
        {
        	for(int j_land = 0; j_land < 2; j_land++)
        	{
        		cin >> land[i_land][j_land];
        	}
        }
        vector<vector<int> > water(B, vector<int>(2));
        for (int i_water = 0; i_water < B; i_water++)
        {
        	for(int j_water = 0; j_water < 2; j_water++)
        	{
        		cin >> water[i_water][j_water];
        	}
        }

        int out_;
        out_ = solve(N, A, B, land, water);
        cout << out_;
        cout << "\n";
    }
}
Input
1
5
1
2
1 2
1 3
3 2
